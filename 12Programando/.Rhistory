NA^2
NA/0
NA^0
NA*0
# Correcto:
# Para determinar si hay valores faltantes, podemos utilizar la funcion is.na
?is.na
is.na(vectorna)
# Obtener el promedio de este vector
mean(vectorna)
# En este caso, la funcion mean nos da NA porque: 1. tenemos un dato faltante NA, 2. un valor que esta registrado como string.
# Otro ejemplo
vectorna2<-c(2,2,NA,2)
vectorna2
# Soluciones a la presencia de valores faltantes
# (Importante: esto solo se puede hacer si los valores faltantes son valores faltantes aleatoriamente, hay mejores tecnicas pero
# esto esta fuera del alcance de este curso)
# 1. No tomar en cuenta los valores faltantes.
mean(vectorna2,na.rm=T)
?mean
# 2. Reemplazar los valores faltantes
# Opcion 1: Utilizar un vector de variables booleanas, de manera que se reemplza por cierto valor cuando
# la variable boolena es igual a 1.
vectorna2corrected=vectorna2
vectorna2corrected[is.na(vectorna2)]<-0
vectorna2corrected
1/NA
# II. Valores inf: inf significa que es indefinido o infinito
inf
# II. Valores inf: inf significa que es indefinido o infinito
1/0
1/0+1
1/0^1
mean(c(1/0,4))
1/0-1/0
1/0-1/0 # NaN not a number
# III. Data imputation
# We can use the package mice
install.packages("mice")
library(mice)
data("mammalsleep")
?data
data
datasets
head(mammalsleep)
dim(mammalsleep)
# Determinar numero de casos faltantes
?nic
nic(mammalsleep)
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
mammalsleep[~is.na(mammalsleep)]
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
mammalsleep[!is.na(mammalsleep)]
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
mammalsleepcomplete=mammalsleep[!is.na(mammalsleep)]
dim(mammalsleepcomplete)
mammalsleep[!is.na(mammalsleep)]
!is.na(mammalsleep)
mammalsleep[!is.na(mammalsleep)]
d<-mammalsleep[!is.na(mammalsleep)]
d
dim(mammalsleepcomplete)
which(is.na(mammalsleep))
d<-mammalsleep[which(!is.na(mammalsleep))]
which(!is.na(mammalsleep))
d<-mammalsleep[which(!is.na(mammalsleep))]
d<-mammalsleep[which(!is.na(mammalsleep)),]
d
dim(d)
d<-mammalsleep[which(is.na(mammalsleep)),]
dim(d)
# Determinar numero de casos faltantes
?nic
nic(mammalsleep)
d<-mammalsleep[which(is.na(mammalsleep)),]
dim(d)
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
d<-mammalsleep[which(is.na(mammalsleep)),]
dim(d)
dim(mammalsleep)
# Determinar numero de casos faltantes
?nic
nic(mammalsleep)
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
ind=which(is.na(mammalsleep))
ind
d(ind)
dim(ind)
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
ind<-which(is.na(mammalsleep))
dim(ind)
is.na(mammalsleep)
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
ind<-as.matrix(which(is.na(mammalsleep)))
d(ind)
dim(ind)
d<-mammalsleep[is.na(mammalsleep))]
d<-mammalsleep[is.na(mammalsleep)]
d<-mammalsleep[!is.na(mammalsleep)]
d<-as.matrix(mammalsleep[!is.na(mammalsleep)],ncol=11)
View(d)
d<-as.matrix(mammalsleep[!is.na(mammalsleep),],ncol=11)
!is.na(mammalsleep)
d=!is.na(mammalsleep)
?is.na
mammalsleep[d]
a=mammalsleep[d]
a
as.matrix(a,ncol=11)
aa=as.matrix(a,ncol=11)
aa
View(births)
View(aa)
nic(mammalsleep)
# Que hacer?
# 1. Eliminar todos los casos faltantes, pero podriamos terminar con una muestra bastante pequena
# 2.  Imputar datos
?mice
# Determinar el patron de datos faltantes
md.pattern(mammalsleep)
?md.pattern
inputed<-mice(mammalsleep)
head(inputed)
?mice
View(inputed)
inputed
names(inputed)
str(inputed)
head(inputed)
# IV. Detectando outliers (Valores extermos)
summary(mammalsleep)
View(mammalsleep)
# IV. Detectando outliers (Valores extermos)
?mammalsleep
# Vemos que en el caso del peso (bw), hay valores bastante altos.
which.max(mammalsleep$bw)
# Vemos que en el caso del peso (bw), hay valores bastante altos.
mammalsleep$bw[which.max(mammalsleep$bw)]
# Vemos que en el caso del peso (bw), hay valores bastante altos.
mammalsleep[[which.max(mammalsleep$bw)],]
# Vemos que en el caso del peso (bw), hay valores bastante altos.
mammalsleep[which.max(mammalsleep$bw)],]
# Vemos que en el caso del peso (bw), hay valores bastante altos.
mammalsleep[which.max(mammalsleep$bw),]
# V.  Interactuando con datos
# Obtener una sub muestra
s=sample(62,10)
mammalsleep[s]
mammalsleep[s,]
getwd()
midirectorio
md=getwd()
md
setwd("md/11GestionDatos")
setwd("md/11GestionDatos")
setwd("/Users/moka/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/11GestionDatos")
rmarkdown::render("11GestionDatos_cheatsheet")
rmarkdown::render("11GestionDatos_cheatsheet.R")
data()
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo: Programming
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
#-----------------------------------------------------------------
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0. POST-PHD/GOALS/2. CODE/R/Ecomienza")
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo: Programming
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
#-----------------------------------------------------------------
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza")
midirectorio
# Obetener los archivos disponibles en el directorio
dir()
list.files()
# Importar datos
datos<-load("datos/procesados/births1.Rdata")
head(births)
summary(births)
# Declaraciones logicas
# 1. Obtener subconjuntos de los datos
# EQUIDAD ==
# 1.1 Obtener datos solo para los viernes
birthsFriday<-births[which(births[,4]==5),]
# Primero, otenemos los booleanos que muestran cuando es viernes.
births[,4]==5
# Luego obtenemos los indices cuando el boolean es verdadero
? which
which(births[,4]==5)
# Luego, obtenemos el sub conjunto utilizando los indices
birthsFriday<-births[which(births[,4]==5),]
# Ahora, queremos solo el dia 12 del mes
birthsFriday12<-birthsFriday[which(birthsFriday[,3]==12),]
birthsFriday12
# INEQUIDAD !=
# Ejemplo: Los viernes que no fueron el 12
notbirthsFriday12<-birthsFriday[which(birthsFriday[,3]!=12),]
notbirthsFriday12
nrow(birthsFriday12)+nrow(notbirthsFriday12)
nrow(birthsFriday)
# EQUIDAD con un intervalo %in%
birthsWeekends<-births[which(births[,4] %in% c(6,7)),]
birthsWeekends
nrow(birthsWeekends)
# INEQUIDAD <,>
birthsWeekends2<-births[which(births[,4] >5),]
birthsWeekends2
nrow(birthsWeekends2)
# Mayor o igual >=
birthsWeekends3<-births[which(births[,4] >=6),]
birthsWeekends3
nrow(birthsWeekends3)
# Menor o igual <=
birthsWeekday<-births[which(births[,4] <=5),]
birthsWeekday
nrow(birthsWeekday)
# Valores perdidos is.na()
is.na(births)
# Condiciones y direcciones
# 1. Condicion si
# Structura:
#if (condition) {
#  Do something
#} else {
#  do something else
#}
if (mean(birthsWeekends[,5])>mean(birthsWeekday[,5])){
cat("En promedio, hay mas bebes en fines de semana")}else
{cat("En promedio, mas bebes en dias de semana")}
# Loops (Bucles)
# For loop: iterar una misma actividad en secuencia
# Structura
#for(i in 1:K){
#Repetir algo K veces
#}
# Ejemplo 1
for(i in 1:10){
print(i)
}
# Ejemplo 2
A=matrix(rnorm(200),nrow=5)
# obtener el valor maximo de cada columna de A y guardarlo al final del loop
# matrix para guardar los maximos
Amax=rep(0,100/5)
for(i in 1:length(Amax)){
Amax[i]<-max(A[,i])
}
# Problem: este metodo es secuencial, por lo que es lento.
# Solucion: version vectorizada utilizando funciones apply
?apply
# Obtener todas las funciones que permiten realizar vectorizacion
apropos("apply")
# apply permite aplicar funciones a todos las columnas de la matriz
apply(A,2,max)
apply(A,1,max)
apply(A,2,sum)
system.time(apply(A,1,sum))
# Comparar tiempos
Abig=matrix(rnorm(20000),nrow=500)
# obtener el valor maximo de cada columna de A y guardarlo al final del loop
# matrix para guardar los maximos
Amax=rep(0,100/5)
tiempo_loop=system.time(for(i in 1:length(Amax)){
Amax[i]<-max(Abig[,i])
})
tiempovectorizado=system.time(apply(A,2,max))
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo: Programming
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
#-----------------------------------------------------------------
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/12Porgramando")
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/12Porgramando")
getwd()
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/12Programando")
midirectorio
# Obetener los archivos disponibles en el directorio
dir()
list.files()
# Importar datos
datos<-load("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/datos/procesados/births1.Rdata")
head(births)
summary(births)
# Declaraciones logicas
# 1. Obtener subconjuntos de los datos
# EQUIDAD ==
# 1.1 Obtener datos solo para los viernes
birthsFriday<-births[which(births[,4]==5),]
# Primero, otenemos los booleanos que muestran cuando es viernes.
births[,4]==5
# Luego obtenemos los indices cuando el boolean es verdadero
? which
which(births[,4]==5)
# Luego, obtenemos el sub conjunto utilizando los indices
birthsFriday<-births[which(births[,4]==5),]
# Ahora, queremos solo el dia 12 del mes
birthsFriday12<-birthsFriday[which(birthsFriday[,3]==12),]
birthsFriday12
# INEQUIDAD !=
# Ejemplo: Los viernes que no fueron el 12
notbirthsFriday12<-birthsFriday[which(birthsFriday[,3]!=12),]
notbirthsFriday12
nrow(birthsFriday12)+nrow(notbirthsFriday12)
nrow(birthsFriday)
# EQUIDAD con un intervalo %in%
birthsWeekends<-births[which(births[,4] %in% c(6,7)),]
birthsWeekends
nrow(birthsWeekends)
# INEQUIDAD <,>
birthsWeekends2<-births[which(births[,4] >5),]
birthsWeekends2
nrow(birthsWeekends2)
# Mayor o igual >=
birthsWeekends3<-births[which(births[,4] >=6),]
birthsWeekends3
nrow(birthsWeekends3)
# Menor o igual <=
birthsWeekday<-births[which(births[,4] <=5),]
birthsWeekday
nrow(birthsWeekday)
# Valores perdidos is.na()
is.na(births)
# Condiciones y direcciones
# 1. Condicion si
# Structura:
#if (condition) {
#  Do something
#} else {
#  do something else
#}
if (mean(birthsWeekends[,5])>mean(birthsWeekday[,5])){
cat("En promedio, hay mas bebes en fines de semana")}else
{cat("En promedio, mas bebes en dias de semana")}
# Loops (Bucles)
# For loop: iterar una misma actividad en secuencia
# Structura
#for(i in 1:K){
#Repetir algo K veces
#}
# Ejemplo 1
for(i in 1:10){
print(i)
}
# Ejemplo 2
A=matrix(rnorm(200),nrow=5)
# obtener el valor maximo de cada columna de A y guardarlo al final del loop
# matrix para guardar los maximos
Amax=rep(0,100/5)
for(i in 1:length(Amax)){
Amax[i]<-max(A[,i])
}
# Problem: este metodo es secuencial, por lo que es lento.
# Solucion: version vectorizada utilizando funciones apply
?apply
# Obtener todas las funciones que permiten realizar vectorizacion
apropos("apply")
# apply permite aplicar funciones a todos las columnas de la matriz
apply(A,2,max)
apply(A,1,max)
apply(A,2,sum)
system.time(apply(A,1,sum))
# Comparar tiempos
Abig=matrix(rnorm(20000),nrow=500)
# obtener el valor maximo de cada columna de A y guardarlo al final del loop
# matrix para guardar los maximos
Amax=rep(0,100/5)
tiempo_loop=system.time(for(i in 1:length(Amax)){
Amax[i]<-max(Abig[,i])
})
tiempovectorizado=system.time(apply(A,2,max))
rmarkdown::render("12Porgramando.R")
rmarkdown::render("12Prrgramando.R")
rmarkdown::render("12Programando.R")
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo: Programming
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
#-----------------------------------------------------------------
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/12Programando")
midirectorio
# Obetener los archivos disponibles en el directorio
#dir()
#list.files()
# Importar datos
datos<-load("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/datos/procesados/births1.Rdata")
head(births)
summary(births)
# Declaraciones logicas
# 1. Obtener subconjuntos de los datos
# EQUIDAD ==
# 1.1 Obtener datos solo para los viernes
birthsFriday<-births[which(births[,4]==5),]
# Primero, otenemos los booleanos que muestran cuando es viernes.
births[,4]==5
# Luego obtenemos los indices cuando el boolean es verdadero
? which
which(births[,4]==5)
# Luego, obtenemos el sub conjunto utilizando los indices
birthsFriday<-births[which(births[,4]==5),]
# Ahora, queremos solo el dia 12 del mes
birthsFriday12<-birthsFriday[which(birthsFriday[,3]==12),]
birthsFriday12
# INEQUIDAD !=
# Ejemplo: Los viernes que no fueron el 12
notbirthsFriday12<-birthsFriday[which(birthsFriday[,3]!=12),]
notbirthsFriday12
nrow(birthsFriday12)+nrow(notbirthsFriday12)
nrow(birthsFriday)
# EQUIDAD con un intervalo %in%
birthsWeekends<-births[which(births[,4] %in% c(6,7)),]
birthsWeekends
nrow(birthsWeekends)
# INEQUIDAD <,>
birthsWeekends2<-births[which(births[,4] >5),]
birthsWeekends2
nrow(birthsWeekends2)
# Mayor o igual >=
birthsWeekends3<-births[which(births[,4] >=6),]
birthsWeekends3
nrow(birthsWeekends3)
# Menor o igual <=
birthsWeekday<-births[which(births[,4] <=5),]
birthsWeekday
nrow(birthsWeekday)
# Valores perdidos is.na()
is.na(births)
# Condiciones y direcciones
# 1. Condicion si
# Structura:
#if (condition) {
#  Do something
#} else {
#  do something else
#}
if (mean(birthsWeekends[,5])>mean(birthsWeekday[,5])){
cat("En promedio, hay mas bebes en fines de semana")}else
{cat("En promedio, mas bebes en dias de semana")}
# Loops (Bucles)
# For loop: iterar una misma actividad en secuencia
# Structura
#for(i in 1:K){
#Repetir algo K veces
#}
# Ejemplo 1
for(i in 1:10){
print(i)
}
# Ejemplo 2
A=matrix(rnorm(200),nrow=5)
# obtener el valor maximo de cada columna de A y guardarlo al final del loop
# matrix para guardar los maximos
Amax=rep(0,100/5)
for(i in 1:length(Amax)){
Amax[i]<-max(A[,i])
}
# Problem: este metodo es secuencial, por lo que es lento.
# Solucion: version vectorizada utilizando funciones apply
?apply
# Obtener todas las funciones que permiten realizar vectorizacion
apropos("apply")
# apply permite aplicar funciones a todos las columnas de la matriz
apply(A,2,max)
apply(A,1,max)
apply(A,2,sum)
system.time(apply(A,1,sum))
# Comparar tiempos
Abig=matrix(rnorm(20000),nrow=500)
# obtener el valor maximo de cada columna de A y guardarlo al final del loop
# matrix para guardar los maximos
Amax=rep(0,100/5)
tiempo_loop=system.time(for(i in 1:length(Amax)){
Amax[i]<-max(Abig[,i])
})
tiempovectorizado=system.time(apply(A,2,max))
rmarkdown::render("12Programando_cheatsheet.R")
rmarkdown::render("12Programando_cheatsheet.R",output_format = "beamer_presentation")
rmarkdown::render("12Programando_cheatsheet.R",output_format = "beamer_presentation: keep_tex: yes")
rmarkdown::render("12Programando_cheatsheet.R",output_format = "beamer_presentation: keep_tex: true")
rmarkdown::render("12Programando_cheatsheet.R",output_format = "pdf_document")
