}
# Store the individual dependent variable including the burnout data
Y[(1+(i-1)*(T+burnout)):((T+burnout)*i)]=yi
# Obtain the initial value
y0i=yiTburnout[length(yi)-(T-1)]
# Generate the vector of dummy observations taking value 1 only for the first observation
d1=kronecker(rep(1,N),rbind(1,0,0))
# Store the individual initial values
y0[i]=y0i
# Store the individual dependent variable only for the T time periods
y[(1+(i-1)*T):(T*i)]=yiTburnout[(length(yiTburnout)-(T-1)):length(yiTburnout)]
# Obtain the lag of the individual dependent variable  only for the T time periods
yminus1i=yiTburnout[(length(yiTburnout)-T):(length(yiTburnout)-1)]
# Store the lag of the individual dependent variable  only for the T time periods
yminus1[(1+(i-1)*T):(T*i)]=yminus1i
#deltay[(1+(i-1)*T):(T*i)]=deltayi
}
-1.98-1.56
# Set values for the parameter of interest of the model
beta1=1
beta2=2
rho=0.5
# Sample size
T=3 # Number of time observations per individual
N=1 # Number of individuals observations per cluster
M=1 # Number of clusters
burnout=10 # Number of observations to burnout to avoid dependency on the initial value
Tplusburnout=T+burnout # Number of time observations plus burnout to avoid dependency on the initial value
# Storing matrices
y0=matrix(NA,ncol=1,nrow=N) # Stores initial values for all individuals
Y=matrix(NA,ncol=1,nrow=N*(T+burnout)) # Stores dependent variable for T + burnout for all individuals
y=matrix(NA,ncol=1,nrow=N*T) # Stores dependent variable for T  for all individuals
yminus1=matrix(NA,ncol=1,nrow=N*T) # Stores first-difference dependent variable for T  for all individuals
deltay=matrix(NA,ncol=1,nrow=N*T) # Stores first-difference of the dependent variable for all time periods and burnout for all individuals
# For loop to generate the data for all individuals
for (i in 1:N){
# Storage matrices for individual data
yiTburnout=matrix(NA,ncol=1,nrow=T+burnout) # stores the dependent variable for T + burnout
yiTburnout[1]=0
x1iTburnout=matrix(NA,ncol=1,nrow=T+burnout) # stores the regressor 1 for T + burnout
x1iTburnout[1]=0
x2iTburnout=matrix(NA,ncol=1,nrow=T+burnout)  # stores the regressor 2 for T + burnout
x2iTburnout[1]=0
deltayiTburnout=matrix(NA,ncol=1,nrow=T+burnout) # stores the first-difference dependent variable for T + burnout
deltayiTburnout[1]=0
deltax1iTburnout=matrix(NA,ncol=1,nrow=T+burnout)  # stores the first-difference regressor 1 for T + burnout
deltax1iTburnout[1]=0
deltax2iTburnout=matrix(NA,ncol=1,nrow=T+burnout) # stores the first-difference regressor 2 for T + burnout
deltax2iTburnout[1]=0
# Generate unobserved individual additive heterogeneity
alphai=rnorm(1)
# For loop to generate time observations for each individual
for(t in 2:Tplusburnout){
# Generate each time period for the regressors
uit=0 # Change for rnorm(1) if you want to generated regressors that are correlated between each other.
x1it=0.5*x1i[t-1]+rnorm(1)+0.3*uit
x1iTburnout[t]=x1it
x2it=0.5*x2i[t-1]+rnorm(1)+0.3*uit
x2iTburnout[t]=x2it
# Generate each time period  correlated multiplicative heterogeneity
lambdait=mvrnorm(n=1,rep(0,2),matrix(c(1,0.2,0.2,1),2,2))
# Generate each time period  dependent variable
yit=alphai+rho*yi[t-1]+x1it*beta1+x2it*beta2+lambdait[1]*x1it+lambdait[2]*x2it+0.5*rnorm(1)
# store all dependent observations for individual i
yiTburnout[t]=yit
# Obtain First differences and store them
deltayit=yi[t]-yi[t-1]
deltayiTburnout[t]=deltayit
deltax1it=x1i[t]-x1i[t-1]
deltax1iTburnout[t]=deltax1it
deltax2it=x2i[t]-x2i[t-1]
deltax2iTburnout[t]=deltax2it
}
# Store the individual dependent variable including the burnout data
Y[(1+(i-1)*(T+burnout)):((T+burnout)*i)]=yi
# Obtain the initial value
y0i=yiTburnout[length(yi)-(T-1)]
# Generate the vector of dummy observations taking value 1 only for the first observation
d1=kronecker(rep(1,N),rbind(1,0,0))
# Store the individual initial values
y0[i]=y0i
# Store the individual dependent variable only for the T time periods
y[(1+(i-1)*T):(T*i)]=yiTburnout[(length(yiTburnout)-(T-1)):length(yiTburnout)]
# Obtain the lag of the individual dependent variable  only for the T time periods
yminus1i=yiTburnout[(length(yiTburnout)-T):(length(yiTburnout)-1)]
# Store the lag of the individual dependent variable  only for the T time periods
yminus1[(1+(i-1)*T):(T*i)]=yminus1i
#deltay[(1+(i-1)*T):(T*i)]=deltayi
}
View(deltayi)
View(deltay)
View(deltayi)
View(deltayiTburnout)
1+1
save.image("~/Dropbox/0. POST-PHD/GOALS/2. CODE/R/Ecomienza/Test.RData")
typeof(mean)
a=1
typeof(a)
a="hola"
typeof(a)
type(q)
type(q())
typeof(q())
rmarkdown::render("13Funciones_cheatsheet.R","pdf_document")
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo: Funciones
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
# Definicion: Programacion funcional divide las tareas en funciones.
#-----------------------------------------------------------------
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/13Funciones")
midirectorio
# Ejemplos de funcion
library(readxl)
# Podemos escribir la funcion para ver que es lo que pasa en esta funcion
read_excel
apply
# Se ve cuales son los argumentos de la funcion entre parentesis, tambien se puede ver el codigo de la funcion.
# Esto puede ser util si queremos usar esa funcion para construir una propia.
# Funciones internas no muestran mucho
q
# Crear funciones
# Ejemplo: crear una funcion que exponencia los elementos a la potencia 2 y se suma 1
ExpAnd1<-function(vec,exponent,addition){
vec^exponent+addition
}
# Esta funcion se la puede:
# 1. Correr el codigo de la funcion, y sera cargada.
# 1. guardar en un script separado, y despues llamarla desde source.
source("ExpAnd.R")
# Ahora, tratamos de correr la funcion
#ExpAnd()
# me da error porque no declare valores default en la funcion
source("ExpAnd2.R")
z=ExpAnd2(exponent=3,addition=1)
# Mejores practicas para escribir funciones
# 1. Describir la funcion
# 2. Describir argumentos and salidas
# 3. Siempre utilizar return, especialmente si queremos generar varias cosas.
# Si no usamos return, la funcion va a retornar el ultimo item.
# 4. Debugging(depuracion) usando condiciones if.  Se puede poner limites y mensajes que expliquen el error
m=matrix(c(1,2,3,4,5,6),ncol=2)
z=ExpAnd2(vec=m,exponent=3,addition=0)
#z=ExpAnd2(vec=m,exponent=3,addition="0")
# 5. Podemos pasar argumentos que no esten especificados utilizando ... en la lista de argumentos
# Esto es comun en funciones de graficos
source("ExpAnd3.R")
z=ExpAnd3(vec=m,exponent=3,addition=10,1001)
z
# Base R cheat sheet
rmarkdown::render("13Funciones_cheatsheet.R","pdf_document")
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo: Funciones
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
# Definicion: Programacion funcional divide las tareas en funciones.
#-----------------------------------------------------------------
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/13Funciones")
midirectorio
# Ejemplos de funcion
library(readxl)
# Podemos escribir la funcion para ver que es lo que pasa en esta funcion
read_excel
apply
# Se ve cuales son los argumentos de la funcion entre parentesis, tambien se puede ver el codigo de la funcion.
# Esto puede ser util si queremos usar esa funcion para construir una propia.
# Funciones internas no muestran mucho
q
# Crear funciones
# Ejemplo: crear una funcion que exponencia los elementos a la potencia 2 y se suma 1
ExpAnd1<-function(vec,exponent,addition){
vec^exponent+addition
}
# Esta funcion se la puede:
# 1. Correr el codigo de la funcion, y sera cargada.
# 1. guardar en un script separado, y despues llamarla desde source.
source("ExpAnd.R")
# Ahora, tratamos de correr la funcion
#ExpAnd()
# me da error porque no declare valores default en la funcion
source("ExpAnd2.R")
z=ExpAnd2(exponent=3,addition=1)
# Mejores practicas para escribir funciones
# 1. Describir la funcion
# 2. Describir argumentos and salidas
# 3. Siempre utilizar return, especialmente si queremos generar varias cosas.
# Si no usamos return, la funcion va a retornar el ultimo item.
# 4. Debugging(depuracion) usando condiciones if.  Se puede poner limites y mensajes que expliquen el error
m=matrix(c(1,2,3,4,5,6),ncol=2)
z=ExpAnd2(vec=m,exponent=3,addition=0)
#z=ExpAnd2(vec=m,exponent=3,addition="0")
# 5. Podemos pasar argumentos que no esten especificados utilizando ... en la lista de argumentos
# Esto es comun en funciones de graficos
source("ExpAnd3.R")
z=ExpAnd3(vec=m,exponent=3,addition=10,1001)
z
# Base R cheat sheet
rmarkdown::render("13Funciones_cheatsheet.R","pdf_document")
rmarkdown::render("13Funciones_cheatsheet.R","html_document")
rmarkdown::render("13Funciones_cheatsheet.R",output_format="html_document")
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo: Funciones
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
# Definicion: Programacion funcional divide las tareas en funciones.
#-----------------------------------------------------------------
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/13Funciones")
midirectorio
# Ejemplos de funcion
library(readxl)
# Podemos escribir la funcion para ver que es lo que pasa en esta funcion
read_excel
apply
# Se ve cuales son los argumentos de la funcion entre parentesis, tambien se puede ver el codigo de la funcion.
# Esto puede ser util si queremos usar esa funcion para construir una propia.
# Funciones internas no muestran mucho
q
# Crear funciones
# Ejemplo: crear una funcion que exponencia los elementos a la potencia 2 y se suma 1
ExpAnd1<-function(vec,exponent,addition){
vec^exponent+addition
}
# Esta funcion se la puede:
# 1. Correr el codigo de la funcion, y sera cargada.
# 1. guardar en un script separado, y despues llamarla desde source.
source("ExpAnd.R")
# Ahora, tratamos de correr la funcion
#ExpAnd()
# me da error porque no declare valores default en la funcion
source("ExpAnd2.R")
z=ExpAnd2(exponent=3,addition=1)
# Mejores practicas para escribir funciones
# 1. Describir la funcion
# 2. Describir argumentos and salidas
# 3. Siempre utilizar return, especialmente si queremos generar varias cosas.
# Si no usamos return, la funcion va a retornar el ultimo item.
# 4. Debugging(depuracion) usando condiciones if.  Se puede poner limites y mensajes que expliquen el error
m=matrix(c(1,2,3,4,5,6),ncol=2)
z=ExpAnd2(vec=m,exponent=3,addition=0)
#z=ExpAnd2(vec=m,exponent=3,addition="0")
# 5. Podemos pasar argumentos que no esten especificados utilizando ... en la lista de argumentos
# Esto es comun en funciones de graficos
source("ExpAnd3.R")
z=ExpAnd3(vec=m,exponent=3,addition=10,1001)
z
# Base R cheat sheet
rmarkdown::render("13Funciones_cheatsheet.R","pdf_document")
rmarkdown::render("13Funciones_cheatsheet.R",c("pdf_document","html_document")
rmarkdown::render("13Funciones_cheatsheet.R",c("pdf_document","html_document"))
rmarkdown::render("13Funciones_cheatsheet.R",c("pdf_document","html_document"))
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo:
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
#-----------------------------------------------------------------
require(ggplot2)
library(dplyr)
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/15FuncionesEstadisticasBasicas")
midirectorio
# Establecer la semilla
set.seed(1)
#-----------------------------------------------------------------
# Generara numeros aleatorios
#-----------------------------------------------------------------
? Distributions
# Distribucion uniforme
unifnum=runif(10000,0,1)
hist(unifnum,freq=F)
summary(unifnum)
# Cambiar el intervalo a -10,10
# Para simulaciones es mejor utilizar  replicate(), apply(), tambien es mejor usar funciones que ya han sido codificadas
reps=10000
system.time(x1<-colSums(matrix(runif(100*5),nrow=5)))
system.time(x1<-apply(matrix(runif(100*5),ncol=5),2,sum))
system.time(x1<-lapply(1:reps,function(i){sum(runif(n=5))}))
system.time(x1<-sapply(1:reps,function(i){sum(runif(n=5))}))
system.time(sum5<-replicate(reps,sum(runif(5))))
d5=data.frame(sum5)
summary(sum5) # Simetrica, media y mediana iguales.
# Para usar ggplot2, primero hay que declarar dataframe y la variable
#luego el tupo de grafico.
ggplot(d5,aes(sum5))+geom_histogram(aes(y=..density..),binwidth=0.1,color="blue",fill="red")
?geom_histogram
# Distribucion normal
normnum=rnorm(10000,0,1)
dn=data.frame(normnum)
hist(normnum,freq=F)
summary(normnum)
ggplot(dn,aes(normnum))+geom_histogram(aes(y=..density..),binwidth=0.1,color="blue",fill="red")
# Cambiar parametros a mu=1, sigma=10
# Comparar distribuciones:  Cuantil Cuantil plot (qqplot)
?qqnorm
qqnorm(normnum)
# Podemos ver que la linea tiene un efecto de borde en las colas, esto es normal y causado por la generacion
# aleatoria. Lo que buscamos son desviaciones en el medio: si este es el caso los datos no son distribuidos como normales.
qqnorm(sum5)
qqnorm(unifnum)
ggplot(data.frame(sum5),aes(sample=sum5))+geom_point(stat="qq")
# En este caso la distribucion teorica esta centrada en 0  pero la distribucion muestral en 2.5
# Se puede corregir de la siguiente manera.
ggplot(data.frame(sum5),aes(sample=sum5))+stat_qq(distribution=qnorm,dparams=list(mean(sum5),sd(sum5)))
# Histograms con la funcion de densidad de probailidad de la normal
ggplot(data.frame(sum5),aes(x=sum5))+geom_histogram(aes(y=..density..),binwidth=0.1)+stat_function(fun=function(x) dnorm(x,mean=2.5,0.66),color="red",size=1)
ggplot(data.frame(unifnum),aes(x=sum5))+geom_histogram(aes(y=..density..),binwidth=0.1)+stat_function(fun=function(x) dnorm(x,mean=2.5,0.66),color="red",size=1)
# Testeo
?htest
?t.test
# Ejemplo
?sleep
head(sleep)
attach(sleep)
# Crear variables
difsleep=extra[group==2]-extra[group==1]
boxplot(difsleep,horizontal = T)
result.t=t.test(difsleep)
# Rechazamos la Ho, a NS of 5%, 10%, 1%.
# Problemsa: numero de observaciones bajo porlo que no podemos
# testear los supuestos del test.
# t-test (normalidad, homoscedasticidad)
class(t.test)
?t.test # ver argumentos y resultados de la funcion
result.t
class(result.t) # Clase disenada para  test de hipotesis.
# Podemos ver que el resultados es una lista, entonces podemos acceder los valores que necesitamos usando listas
result.t$p.value
str(result.t)
t.test(extra~group,paired=TRUE)
#Obtenemos un estadistico t que es negativo porque se toma la diferencia entre G1 y G2 mientras que R toma la differencia entre G1 y G2
t.test(extra~group,paired=FALSE) # Aqui no tomamos en cuenta que son los mismos estudiantes y por lo tanto perdemos poder.
# Tener los mismos estudiantes aumenta el poder
# Hay que tener en cuenta el diseno de experimento
#  Testear grupos multiples
load("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/datos/procesados/birthn.Rdata")
birthn[1:6,]
# Agrupar datos por dia
library(dplyr)
sumsperday<-birthn%>% group_by(day_of_week) %>% summarise(sum=sum(births)) %>% arrange()
sumsperday
# Testear si hay la misma probailidad de nacimiento en cada dia.
# Supuestos:independencia entre dias y nacimientos
res=chisq.test(sumsperday[,2])
str(res)
# Regresion
install.packages("HistData")
library(HistData)
?Galton
head(Galton)
attach(Galton)
plot(child,parent)
# Los datos no se han obtenido de manera continua, lo que conduce a una perdida de precision.
hist(parent)
# Al aumentar la anchura de clase, se ve el problema
hist(parent,20)
hist(child,60)
# Vamos a corregir utilizando la funcion jitter
plot(jitter(parent,3),jitter(child,3),pch=19,col="orange")
# Ahora observamos elipsoides que se deben a la distribucion normal en ambas direcciones.
cor(parent,child)
# Correlacion importante
# Hay un componente genetico
linearreg<-lm(child~parent)
summary(linearreg)
class(linearreg)
?lm
names(linearreg)
linearreg$residuals
plot(linearreg)
rmarkdown::render("15FuncionesEstadisticasBasicas_cheatsheet.R",c("pdf_document","html_document"))
# Autor: Monika Avila Marquez, Ph.D.
# Fecha: 12.04.2023
# Objetivo:
# Referencia: Basado en R Programming Fundamentals, StanfordOnline XDFS112
#-----------------------------------------------------------------
require(ggplot2)
library(dplyr)
# Limpiar el espacio de trabajo
rm(list=ls())
#-----------------------------------------------------------------
# Configurar el directorio
#-----------------------------------------------------------------
midirectorio<-setwd("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/15FuncionesEstadisticasBasicas")
midirectorio
# Establecer la semilla
set.seed(1)
#-----------------------------------------------------------------
# Generara numeros aleatorios
#-----------------------------------------------------------------
? Distributions
# Distribucion uniforme
unifnum=runif(10000,0,1)
hist(unifnum,freq=F)
summary(unifnum)
# Cambiar el intervalo a -10,10
# Para simulaciones es mejor utilizar  replicate(), apply(), tambien es mejor usar funciones que ya han sido codificadas
reps=10000
system.time(x1<-colSums(matrix(runif(100*5),nrow=5)))
system.time(x1<-apply(matrix(runif(100*5),ncol=5),2,sum))
system.time(x1<-lapply(1:reps,function(i){sum(runif(n=5))}))
system.time(x1<-sapply(1:reps,function(i){sum(runif(n=5))}))
system.time(sum5<-replicate(reps,sum(runif(5))))
d5=data.frame(sum5)
summary(sum5) # Simetrica, media y mediana iguales.
# Para usar ggplot2, primero hay que declarar dataframe y la variable
#luego el tupo de grafico.
ggplot(d5,aes(sum5))+geom_histogram(aes(y=..density..),binwidth=0.1,color="blue",fill="red")
?geom_histogram
# Distribucion normal
normnum=rnorm(10000,0,1)
dn=data.frame(normnum)
hist(normnum,freq=F)
summary(normnum)
ggplot(dn,aes(normnum))+geom_histogram(aes(y=..density..),binwidth=0.1,color="blue",fill="red")
# Cambiar parametros a mu=1, sigma=10
# Comparar distribuciones:  Cuantil Cuantil plot (qqplot)
?qqnorm
qqnorm(normnum)
# Podemos ver que la linea tiene un efecto de borde en las colas, esto es normal y causado por la generacion
# aleatoria. Lo que buscamos son desviaciones en el medio: si este es el caso los datos no son distribuidos como normales.
qqnorm(sum5)
qqnorm(unifnum)
ggplot(data.frame(sum5),aes(sample=sum5))+geom_point(stat="qq")
# En este caso la distribucion teorica esta centrada en 0  pero la distribucion muestral en 2.5
# Se puede corregir de la siguiente manera.
ggplot(data.frame(sum5),aes(sample=sum5))+stat_qq(distribution=qnorm,dparams=list(mean(sum5),sd(sum5)))
# Histograms con la funcion de densidad de probailidad de la normal
ggplot(data.frame(sum5),aes(x=sum5))+geom_histogram(aes(y=..density..),binwidth=0.1)+stat_function(fun=function(x) dnorm(x,mean=2.5,0.66),color="red",size=1)
ggplot(data.frame(unifnum),aes(x=sum5))+geom_histogram(aes(y=..density..),binwidth=0.1)+stat_function(fun=function(x) dnorm(x,mean=2.5,0.66),color="red",size=1)
# Testeo
?htest
?t.test
# Ejemplo
?sleep
head(sleep)
attach(sleep)
# Crear variables
difsleep=extra[group==2]-extra[group==1]
boxplot(difsleep,horizontal = T)
result.t=t.test(difsleep)
# Rechazamos la Ho, a NS of 5%, 10%, 1%.
# Problemsa: numero de observaciones bajo porlo que no podemos
# testear los supuestos del test.
# t-test (normalidad, homoscedasticidad)
class(t.test)
?t.test # ver argumentos y resultados de la funcion
result.t
class(result.t) # Clase disenada para  test de hipotesis.
# Podemos ver que el resultados es una lista, entonces podemos acceder los valores que necesitamos usando listas
result.t$p.value
str(result.t)
t.test(extra~group,paired=TRUE)
#Obtenemos un estadistico t que es negativo porque se toma la diferencia entre G1 y G2 mientras que R toma la differencia entre G1 y G2
t.test(extra~group,paired=FALSE) # Aqui no tomamos en cuenta que son los mismos estudiantes y por lo tanto perdemos poder.
# Tener los mismos estudiantes aumenta el poder
# Hay que tener en cuenta el diseno de experimento
#  Testear grupos multiples
load("~/Dropbox/0.POST-PHD/GOALS/2.CODE/R/Ecomienza/datos/procesados/birthn.Rdata")
birthn[1:6,]
# Agrupar datos por dia
library(dplyr)
sumsperday<-birthn%>% group_by(day_of_week) %>% summarise(sum=sum(births)) %>% arrange()
sumsperday
# Testear si hay la misma probailidad de nacimiento en cada dia.
# Supuestos:independencia entre dias y nacimientos
res=chisq.test(sumsperday[,2])
str(res)
# Regresion
#install.packages("HistData")
library(HistData)
?Galton
head(Galton)
attach(Galton)
plot(child,parent)
# Los datos no se han obtenido de manera continua, lo que conduce a una perdida de precision.
hist(parent)
# Al aumentar la anchura de clase, se ve el problema
hist(parent,20)
hist(child,60)
# Vamos a corregir utilizando la funcion jitter
plot(jitter(parent,3),jitter(child,3),pch=19,col="orange")
# Ahora observamos elipsoides que se deben a la distribucion normal en ambas direcciones.
cor(parent,child)
# Correlacion importante
# Hay un componente genetico
linearreg<-lm(child~parent)
summary(linearreg)
class(linearreg)
?lm
names(linearreg)
linearreg$residuals
plot(linearreg)
rmarkdown::render("15FuncionesEstadisticasBasicas_cheatsheet.R",c("pdf_document","html_document"))
rmarkdown::render("15FuncionesEstadisticasBasicas_cheatsheet.R")
